name: "Engine CI/CD"

on:
  push:
    branches: ['main', 'staging', 'dev']
  pull_request:
    branches: ['main', 'staging', 'dev']
  schedule:
    - cron: '32 23 * * 6'

jobs:
  changes:
    name: Allocating Push Filter
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      pull-requests: read
    outputs:
      engine: ${{ steps.filter.outputs.engine }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            engine:
              - 'engine/**'
          base: ${{ github.ref }}

  analyze:
    name: Security Analysis on (${{ matrix.language }})
    needs: changes
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  run-lint:
    name: Linting Code
    runs-on: ubuntu-latest
    needs: [changes, analyze]
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_YAML: false
          VALIDATE_GITHUB_ACTIONS: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_JAVASCRIPT_STANDARD: false

  build-and-scan:
    name: Build, Push and Scan Engine
    runs-on: ubuntu-latest
    needs: [changes, analyze, run-lint]
    permissions:
      security-events: write
      packages: write
      contents: read
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Prepare lowercase image name
        id: prep
        run: |
          IMAGE="ghcr.io/${GITHUB_REPOSITORY,,}/engine:${GITHUB_SHA}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./engine
          file: ./engine/docker/engine.Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.image }}

      - name: Scan image with Anchore/Grype
        uses: anchore/scan-action@v6
        with:
          image: ${{ steps.prep.outputs.image }}
          fail-build: false
          output-format: sarif
          output-file: grype-report.sarif

      - name: Upload SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype-report.sarif
