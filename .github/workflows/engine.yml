name: "Engine CI/CD"

on:
  push:
  pull_request:
    branches: ['main', 'staging', 'dev']
  schedule:
    - cron: '32 23 * * 6'

jobs:
  changes:
    name: Allocating Push Filter
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    # Only run this job for push events
    permissions:
      # Required if adapting for pull requests later
      pull-requests: read
    outputs:
      engine: ${{ steps.filter.outputs.engine }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            engine:
              - 'engine/**'
          base: ${{ github.ref }} 
          # Detect changes against the most recent commit on the same branch

  analyze:
    name: Security Analysis on (${{ matrix.language }})
    needs: changes
    # Depend on changes job
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'  
    # Run always for non-push events, or if engine changed on push
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        # 'actions'  'c-cpp' 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Add any setup steps before running the `github/codeql-action/init` action.
    # This includes steps like installing compilers or runtimes (`actions/setup-node`
    # or others). This is typically only required for manual builds.
    # - name: Setup runtime (example)
    #   uses: actions/setup-example@v1

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
    
  run-lint:
    name: Linting Code
    runs-on: ubuntu-latest
    needs: [changes, analyze]
    # Depend on changes job
    if: github.event_name != 'push' || needs.changes.outputs.engine == 'true'  
    # Run always for non-push events, or if engine changed on push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_YAML: false
          VALIDATE_GITHUB_ACTIONS: false
          # Disable Black linter for Python
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false

  build-and-deploy:
    name: Build and Deploy Engine
    needs: [changes, analyze, run-lint]
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name }}

    runs-on: ubuntu-latest

    permissions:
      contents: read # To checkout code
      id-token: write # Required for Workload Identity Federation

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set environment name
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/engine:${{ steps.set-env.outputs.ENV_NAME }} \
            --build-arg ENV=${{ steps.set-env.outputs.ENV_NAME }} \
            -f engine/docker/engine.Dockerfile .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/engine:${{ steps.set-env.outputs.ENV_NAME }}


      # --- Replaced  Docker Hub steps with Cloud Build Trigger ---
#      - name: Trigger Cloud Build for Docker Image
#        run: |
#          gcloud builds submit . \
#            --config=engine/cloudbuild-docker-build.yml \
#           --project=YOUR_PROJECT_ID \
#            --substitutions=_ENV_NAME=${{ steps.set-env.outputs.ENV_NAME }} \
#            --region=australia-southeast2
#        # The `.` means submit the entire current directory as the source for Cloud Build.



