name: "Frontend CI/CD"

on:
  push:
    branches: ['main', 'staging', 'dev']
  pull_request:
    branches: ['main', 'staging', 'dev']
  schedule:
    - cron: '32 23 * * 6'

jobs:
  changes:
    name: Allocating Push Filter
    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    # Only run this job for push events
    permissions:
      # Required if adapting for pull requests later
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
          base: ${{ github.ref }} 
          # Detect changes against the most recent commit on the same branch

  analyze:
    name: Security Analysis on (${{ matrix.language }})
    needs: changes
    if: github.event_name != 'push' || needs.changes.outputs.backend == 'true'  
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript-typescript' ]
        # 'actions'  'c-cpp' 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'rust', 'swift'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
    
  run-lint:
    name: Linting Code
    runs-on: ubuntu-latest
    needs: [changes, analyze]
    if: github.event_name != 'push' || needs.changes.outputs.frontend == 'true'  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: "main"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_YAML: false
          VALIDATE_GITHUB_ACTIONS: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_PYTHON_ISORT: false
          VALIDATE_JAVASCRIPT_STANDARD: false
          VALIDATE_HTML: false
          VALIDATE_MARKDOWN: false
          VALIDATE_NATURAL_LANGUAGE: false

#  build-backend:
#    name: Build Backend w/ Docker 
#    runs-on: ubuntu-latest
#    needs: [changes, analyze, run-lint]

#    steps:
#      - name: Checkout Backend w/ Docker
#        uses: actions/checkout@v3
#        with:
#          ref: main
#
#      - name: Confirm Branch
#        run: git branch
#
#      - name: Build Backend Container
#        run: |
#          docker build -t autoaudit/backend -f engine/docker/backend.Dockerfile .
#
#      - name: Run Backend Container
#        run: |
#          docker run --rm autoaudit/backend
